{
  "$id": "/schema/baseSchema",
  "type": "object",
  "properties": {
    "file_reference": {
      "type": "string",
      "minLength": 1,
      "maxLength": 6,
      "pattern": ,
      "tdrName": "FileReference",
      "tdrFileHeader": "FileReference",
       "message": {
        "format": "File Reference is invalid"
      },
      "Emma Says": "  We don't actually currently have this field in the download / upload. It is in the bag export but not currently available for users. It should be though, so we should add it in at some point, maybe not yet. This is a system generated field so we aren't expecting users to change this, but we could validate it anyway to gain confidence that mistakes havent been made. Not sure how we manage reporting to users. There is a standard structure to this that we should be able to use a Regex validate for - I'm not sure what it is, but this is why I have added pattern to the list. I think the first character is a Z"
    },
    "UUID": {
      "type": "string",
      "format": "uuid",
      "tdrName": "UUID",
      "tdrFileHeader": "UUID",
      "message": {
        "format": "UUID must be a valid UUID"
      },
      "Emma Says": "This is a system generated field, not sure what we should say back to users if this fails"
    },
    "file_path": {
      "type": [
        "string",
        "null"
      ],
      "tdrName": "Filepath",
      "tdrFileHeader": "Filepath",
      "Emma Says": "There is a filepath and a filename in the upload file, they are both system generated but not sure what to do with these"
    },
     "file_name": {
      "type": [
        "string",
        "null"
      ],
      "tdrName": "Filename",
      "tdrFileHeader": "Filename",
      "Emma Says": "This is a system generated field, not sure what we should say back to users if this fails"
    },
    "date_last_modified": {
      "type": "string",
      "format": "date",
      "tdrName": "ClientSideFileLastModifiedDate",
      "tdrFileHeader": "Date last modified"
      "message": {
        "format": "Date last modified must be a valid date"
      },
      "Emma Says": "This is a system generated field, not sure what we should say back to users if this fails"
    },
    "end_date": {
      "type": [
        "string",
        "null"
      ],
      "format": "date",
      "message": {
        "format": "Date of the Record must be a valid date."
      },
      "lessThanTodayError": "Date of the Record must be earlier than today.",
      "notDefaultWarning": "Date of the record looks like a default date, please double check this."
      "tdrName": "end_date",
      "tdrFileHeader": "UUID"
      "Emma says": "There might be more validation that we could put on end date - is there a range that would be acceptable? not earlier than today? pick up on defaults? eg. 1/1/1980)"
    },
    "description": {
      "type": [
        "string",
        "null"
      ]
      "maxLength": 8000,
      "tdrName": "description",
      "tdrFileHeader": "Description",
      "emptyWarning": "Description has not been provided, please provide a description."
      "message": {
        "format": "Description should be less than 8000 characters"
      },
      "Emma Says": "I also want to add a WARNING (not Error) if Description is NULL"
    },
    "former_reference_department": {
      "type": [
        "string",
        "null"
      ],
      "maxLength": 8000,
      "tdrFileHeader": "Former Reference"
      "message": {
        "format": "Description Former Reference should be less than 8000 characters"
      },
       "Emma Says": "When we introduce retained records, we may need to add validation here"
    },
    "closure_type": {
      "enum": [
        "Closed",
        "closed",
        "CLOSED",
        "Open",
        "open",
        "OPEN"
      ],
      "tdrName": "ClosureType",
      "tdrFileHeader": "Closure status"
      "message": {
        "format": "Closure Status must be 'Open' or 'Closed'"
      },
      "Emma Says": "I'm wondering about case here,and how this gets mapped back to what is stored in the db"
    },
    "closure_start_date": {
      "type": [
        "string",
        "null"
      ],
      "format": "date",
      "tdrName": "ClosureStartDate",
      "tdrFileHeader": "Closure Start Date",
      "message": {
        "format": "Closure Start Date must be a valid Date"
      },
        "Emma Says": "I intend to remove this field in the longer term and default it to end_date"
    },
    "closure_period": {
      "type": [
        "integer",
        "null"
      ],
      "tdrName": "ClosurePeriod",
      "tdrFileHeader": "Closure Period"
    },
    "foi_exemption_code": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "23",
          "24",
          "26",
          "27(1)",
          "27(2)",
          "28",
          "29",
          "30(2)",
          "31",
          "32",
          "33",
          "34",
          "35(1)(a)",
          "35(1)(b)",
          "35(1)(c)",
          "35(1)(d)",
          "36",
          "37(1)(a)",
          "37(1)(aa)",
          "37(1)(ac)",
          "37(1)(ad)",
          "37(1)(b)",
          "38",
          "39",
          "40(2)",
          "41",
          "42",
          "43",
          "43(1)",
          "43(2)",
          "44",
          "null",
          null
        ]
      },
      "tdrName": "FoiExemptionCode",
      "tdrFileHeader": "FOI exemption code",
      "message": {
        "format": "This field contains an invalid FOI Exemption Code, please refer to the list of valid FOI Exemption codes in the Help Guide"
      },
        "Emma Says": "Ideally we would be telling the user WHAT it is that they have input that is invalid."
    },
    "foi_exemption_asserted": {
      "type": [
        "string",
        "null"
      ],
      "format": "date",
      "lessThanTodayError": "FOI decision asserted must be earlier than today.",
      "tdrName": "FoiExemptionAsserted",
      "tdrFileHeader": "FOI decision asserted",
      "message": {
        "format": "FOI decision asserted is an invalid date"
      },
        "Emma Says": "I also want to validate that this is greater than end_date - this needs to go in the relationship schema maybe? Or the closure schema?."
    },
    "title_closed": {
      "type": "boolean",
      "tdrName": "TitleClosed"
      "tdrFileHeader": "Is the title sensitive for the public?",
      "Emma Says": "This will be a 'Yes' or 'No', but I would like to get rid of this in future. Until then it will need a relationship schema test"
    },
    "title_alternate": {
      "type": [
        "string",
        "null"
      ],
      "maxLength": 8000,
      "tdrName": "TitleAlternate"
      "tdrFileHeader": "Add alternative title without the file extension",
      "Emma Says": "Nothing on this one!"
    },
    "description_closed": {
      "type": "boolean",
      "tdrName": "DescriptionClosed",
      "tdrFileHeader": "Is the description sensitive for the public?",
      "Emma Says": "This is inconsistent with the title_closed - they should probably be the same"
    },
    "description_alternate": {
      "type": [
        "string",
        "null"
      ],
      "maxLength": 8000,
      "tdrName": "DescriptionAlternate",
      "tdrFileHeader": "Alternative description",
      "Emma Says": "Nothing"
    },
    "language": {
       "enum": [
              "English",
              "Welsh",
               null
            ],
      "tdrName": "language",
      "tdrFileHeader": "Language",
      "Emma Says": "Nothing"
    },
    "file_name_translation": {
      "type": "string",
      "tdrName": "Translated title of record",
      "tdrFileHeader": "Language",
      "Emma Says": "Nothing"
    },
    "file_name_translation_language": {
      "type": "string",
      "tdrName": "file_name_translation_language",
      "tdrFileHeader": "Translated title of record",
      "Emma Says": "I don't know what this is, it might be nice to understand"
    }
  }
}


