import sbt._
import Keys._
import scala.util.Using
import scala.io.Source

/** Auto plugin to generate BaseSchema object containing property name constants from baseSchema.schema.json */
object BaseSchemaGeneratorPlugin extends AutoPlugin {
  object autoImport {
    val generateBaseSchemaConstants = taskKey[Seq[File]]("Generate BaseSchema property name constants")
    val baseSchemaJsonFile = settingKey[File]("Location of baseSchema.schema.json")
  }
  import autoImport._

  override def trigger: PluginTrigger = allRequirements

  override def projectSettings: Seq[Setting[_]] = Seq(
    baseSchemaJsonFile := baseDirectory.value / "metadata-schema" / "baseSchema.schema.json",
    Compile / sourceGenerators += generateBaseSchemaConstants.taskValue,
    generateBaseSchemaConstants := {
      val log = streams.value.log
      val schemaFile = baseSchemaJsonFile.value
      if (!schemaFile.exists()) {
        log.warn(s"Schema file not found: $schemaFile")
        Seq.empty[File]
      } else {
        import ujson.*
        val jsonStr = Using(Source.fromFile(schemaFile)(scala.io.Codec.UTF8))(_.mkString).get
        val parsed = ujson.read(jsonStr)
        val propNames: Seq[String] = parsed.obj.get("properties") match {
          case Some(obj: ujson.Obj) => obj.value.keys.toSeq.sorted
          case _ => Seq.empty
        }
        val constantsBuilder = new StringBuilder
        propNames.foreach { n =>
          val safe = n.replaceAll("[^A-Za-z0-9_]", "_")
          constantsBuilder.append("  val ").append(safe).append(": String = \"").append(n).append("\"\n")
        }
        // Build final code (constantsBuilder already ends lines with \n)
        val code =
          s"""|package uk.gov.nationalarchives.tdr.schema.generated
              |// AUTO-GENERATED: DO NOT EDIT. Generated by BaseSchemaGeneratorPlugin.
              |object BaseSchema {
              |""".stripMargin + constantsBuilder.toString + "}" + "\n"
        val outDir = (Compile / sourceManaged).value / "generated"
        outDir.mkdirs()
        val outFile = outDir / "BaseSchema.scala"
        IO.write(outFile, code)
        log.info(s"Generated ${outFile.getAbsolutePath} with ${propNames.size} property constants.")
        Seq(outFile)
      }
    }
  )
}
